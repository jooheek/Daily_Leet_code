[OAuth2.0 마스터 by에이콘](https://steemit.com/oauth2/@kaspyx/oauth2-0-2)
[OAuth2.0 공식페이지](https://oauth.net/2/)
[로그인 세션,쿠키 방식,JWT](https://tansfil.tistory.com/58)
[페이스북 연동](https://dreamyoungs.github.io/tip/facebook-login-connect)
[구글 연동](https://developers.google.com/identity/sign-in/web/sign-in)
[네이버 연동](https://developers.naver.com/docs/login/web/)
<참고도서 :OAuth2.0 마스터 by에이콘>

#신뢰레벨에 따른 클라이언트 유형.

1.trusted 
기밀을 안전하게 저장할수 있는 어플이다. 클라이언트 자격증명과 토큰 또는 어플리케이션이 필요로 하는 다른 리소스를 안전하게 저장할 수 있다.
ex)기밀정보를 안전하게 저장하고 전송할수 있는 백엔드 서버가 존재하는 전형적인 3계층 클라이언트 -서버 -데이터베이스 어플리케이션
access token을 갱신하는건 신뢰클라이언트일 경우에만 가능하다.

2.untrusted
기밀정보나 클라이언트 자격증명은 신뢰할 수없다
ex)브라우저 기반 어플(html,javascript 어플리케이션 정보를 안전하게 저장하는 서버가 없는 어플) 
모든 정보가 브라우저에 저장돼야하기 때문에 저장된 모든 정보에 접근할 수있다.

#클라이언트 유형별 워크플로우

1.인가코드 그랜트(authorization code grant, server-side workflow)
키를 얻기위해 태그를 사용한다. 태그는 일회성이고 소모품이다. 

2.암시적 그랜트(implicit grant, client-side workflow)
비신뢰 클라이어트를 위해 설계됨

*bearer 토큰 : 액세스 토큰 유형중 하나.특정 리소스에 접근하기 위해 토큰 외의 다른 것은 필요없다.

#OAuth client가 되기 위한 과정

1.클라이언트 어플리케이션 등록

1)클라이언트ID : 클라이언트 어플리케이션의 고유ID 서비스 제공자가 생성/사용자가 설정.클라이언트 이름과 다른것이다.
해당서비스 제공자에 등록된 클라이언트 어플리케이션중 유일해야한다.
2)클라이언트 시크릿: 어플리케이션을 위한 비밀키 서비스 제공자에게 요청을 보낼 때 어플리케이션의 신원을 알려주는 값이다.
서비스제공자가 클라이언트 시크릿을 제공한다.
3)리다이렉션 앤드포인트 : 서비스 제공자가 응답(에러 혹은 토큰)을 전달하기 위해 사용하는 앤드포인트.서비스 제공자에 따라 제공여부 결정된다.
4)인가 앤드포인트 : 클라이언트 어플리케이션이 인가플로우를 시작할 떄 사용하는 앤드포인트.이하동문
5)토큰 앤드포인트 : 클라이언트 어플리케이션이 토큰플로우를 시작할때 사용하는 앤드포인트.이하동문

클라이언트 자격증명 : 클라이언트ID와 클라이언트 시크릿.클라이언트 어플리케이션을 식별할때 사용된다.


[oracle endpoint](https://docs.oracle.com/en/cloud/get-started/subscriptions-cloud/ocuid/oauth-endpoints.html)
endpoint는 웹서버에서 전형적인 URI이다. 하지만 OAuth endpoint는 OAuth 인증요청을 받을때 사용하는 URL이다.
token endpoint client application이 액세스 토큰을 요청할떄 사용된는 인증서버의 endpoint다. 
Oracle cloud에서 OAuth 서비스가 client의 신용을 확인하고 client에게 access token을 발급한다. 

*리다이렉션 앤드포인트 : 애플리케이션에 대한 콜백. 서비스 제공자가 어플로 컨트롤을 전달하고 중요한 정보(토큰 또는 에러 메시지)를 전달하기 위한 방법이다.
OAuth 2.0으로 인가 프로세스를 시작할떄 어플 이용자를 서비스 제공자의 인가 앤드푄트로 로그인하도록 이끌고 해당 어플을 인가하도록 이끌게 된다.
 일단 사용자가 그런 과정을 거치면 컨트롤은 다시 어플로 넘어가야한다.  이 과정이 리다이렉션 앤드포인트를 통해 이뤄진다. 


2.액세스 토큰 얻기

신뢰 어플리케이션->인가 코드 그랜트 플로우   ->액세스 토큰 획득
비신뢰 어플리케이션 ->암시적 그랜트 플로우

액세스 토큰 : 범위와 접근기간 
권한도 함께 요청할 수 있다. 
-범위 : 토큰 보유자가 접근할 수 있는 보호된 리소스 세트.범위는 다양하다.요구한 리소스 이상의 것을 원한다면 새로운 범위에 대한 새로운 액세스 토큰을 요청해야 한다.
  범위를 요청할 떄 해당 범위를 나타내는 특정 문자열을 사용한다. 
-접근기간 : 대부분 만료시간이 있지만 없는 경우도 있다. (영구토큰) 범위에 다라 접근기간이 달라지는 경향이 있다. 만료되면 새로운 액세스 토큰이 필요하다.

토큰폐기 : 토큰이 유출되거나 침해됐다면 폐기시킬수 있다.
리프레시 토큰 : 현재의 액세스 토큰의 접근기간이 만료돼 새로운 액세스 토큰을 요청해 세션을 갱신하고자 할때 사용된다.
 신뢰클라이언트에서만 사용할 수 있다. 암시적 그랜트 플로우를 사용할때는 반환되지 않는다. 

3.액세스 토큰 사용
API를 호출하려면 액세스 토큰을 발급받고 액세스 토큰의 유효성 을 검사해야한다.

액세스 토큰을 API호출을 이용해 전달하는 방법 3가지(bearer토큰만 해당)

1)인가요청 헤더필드로 전달
HTTP 요청의 인가헤더에 액세스 토큰을 담아서 서비스 제공자에게 전달한다. 
인가 헤더에 토큰 유형과 해당토큰의 값이 포함된다.(GET)
OAuth 2.0 에서 선호하는 액세스 토큰 전달방식.HTTP헤더의 내용을 변경해야하므로 어려운 방법이다.

2)인코딩된 폼으로 파라미터 전달
(POST)요청을 이용한다. 
Content-Type 헤더는 application/x-www-form-urlencoded여야한다.
HTTP요청의 내용은 application/x-www-form-urlencoded 포맷으로 인코딩 되어야한다.

3)URI질의 파라미터로 전달
간편하고 개발이 용이하다. HTTP 헤더를 수정하지 않아도 되고 POST방식을 사용하지 않아도 된다.
테스트, 디버깅하기에 용이한 방법이다. 보안결함이 발생할 수 있다.	     


4.액세스 토큰 갱신
1) 전체 인증 과정을 다시 시작한다.사용자가 다시 로그인 해야할 수도 있다.
2) 리프레시 토큰을 이용해서 액세스 토큰을 갱신한다. 


서비스URL= 사이트 도메인 = 승인된 도메인
Callback URL = Redirect URL = 승인된 redirection URI




